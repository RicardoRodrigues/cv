{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/psyckic/Development/CV/src/components/MetaTags/index.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query DefaultSEOQuery {\\n    site {\\n      siteMetadata {\\n        title\\n        description\\n        author\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nvar MetaTags = function MetaTags(_ref) {\n  var description = _ref.description,\n      _ref$lang = _ref.lang,\n      lang = _ref$lang === void 0 ? 'en' : _ref$lang,\n      _ref$meta = _ref.meta,\n      meta = _ref$meta === void 0 ? [] : _ref$meta,\n      _ref$keywords = _ref.keywords,\n      keywords = _ref$keywords === void 0 ? [] : _ref$keywords,\n      title = _ref.title;\n  return __jsx(StaticQuery, {\n    query: detailsQuery,\n    render: function render(data) {\n      var metaDescription = description || data.site.siteMetadata.description;\n      return __jsx(Helmet, {\n        htmlAttributes: {\n          lang: lang\n        },\n        title: title,\n        titleTemplate: \"%s | \".concat(data.site.siteMetadata.title),\n        meta: [{\n          name: \"description\",\n          content: metaDescription\n        }, {\n          property: \"og:title\",\n          content: title\n        }, {\n          property: \"og:description\",\n          content: metaDescription\n        }, {\n          property: \"og:type\",\n          content: \"website\"\n        }, {\n          name: \"twitter:card\",\n          content: \"summary\"\n        }, {\n          name: \"twitter:creator\",\n          content: data.site.siteMetadata.author\n        }, {\n          name: \"twitter:title\",\n          content: title\n        }, {\n          name: \"twitter:description\",\n          content: metaDescription\n        }].concat(keywords.length > 0 ? {\n          name: \"keywords\",\n          content: keywords.join(\", \")\n        } : []).concat(meta),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  });\n};\n\nexport default MetaTags;\nvar detailsQuery = graphql(_templateObject());","map":{"version":3,"sources":["/Users/psyckic/Development/CV/src/components/MetaTags/index.tsx"],"names":["React","Helmet","StaticQuery","graphql","MetaTags","description","lang","meta","keywords","title","detailsQuery","data","metaDescription","site","siteMetadata","name","content","property","author","concat","length","join"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,QAArC;;AAUA,IAAMC,QAAwB,GAAG,SAA3BA,QAA2B;AAAA,MAAGC,WAAH,QAAGA,WAAH;AAAA,uBAAgBC,IAAhB;AAAA,MAAgBA,IAAhB,0BAAuB,IAAvB;AAAA,uBAA6BC,IAA7B;AAAA,MAA6BA,IAA7B,0BAAoC,EAApC;AAAA,2BAAwCC,QAAxC;AAAA,MAAwCA,QAAxC,8BAAmD,EAAnD;AAAA,MAAuDC,KAAvD,QAAuDA,KAAvD;AAAA,SAC/B,MAAC,WAAD;AACE,IAAA,KAAK,EAAEC,YADT;AAEE,IAAA,MAAM,EAAE,gBAAAC,IAAI,EAAI;AACd,UAAMC,eAAe,GACnBP,WAAW,IAAIM,IAAI,CAACE,IAAL,CAAUC,YAAV,CAAuBT,WADxC;AAEA,aACE,MAAC,MAAD;AACE,QAAA,cAAc,EAAE;AACdC,UAAAA,IAAI,EAAJA;AADc,SADlB;AAIE,QAAA,KAAK,EAAEG,KAJT;AAKE,QAAA,aAAa,iBAAUE,IAAI,CAACE,IAAL,CAAUC,YAAV,CAAuBL,KAAjC,CALf;AAME,QAAA,IAAI,EAAE,CACJ;AACEM,UAAAA,IAAI,eADN;AAEEC,UAAAA,OAAO,EAAEJ;AAFX,SADI,EAKJ;AACEK,UAAAA,QAAQ,YADV;AAEED,UAAAA,OAAO,EAAEP;AAFX,SALI,EASJ;AACEQ,UAAAA,QAAQ,kBADV;AAEED,UAAAA,OAAO,EAAEJ;AAFX,SATI,EAaJ;AACEK,UAAAA,QAAQ,WADV;AAEED,UAAAA,OAAO;AAFT,SAbI,EAiBJ;AACED,UAAAA,IAAI,gBADN;AAEEC,UAAAA,OAAO;AAFT,SAjBI,EAqBJ;AACED,UAAAA,IAAI,mBADN;AAEEC,UAAAA,OAAO,EAAEL,IAAI,CAACE,IAAL,CAAUC,YAAV,CAAuBI;AAFlC,SArBI,EAyBJ;AACEH,UAAAA,IAAI,iBADN;AAEEC,UAAAA,OAAO,EAAEP;AAFX,SAzBI,EA6BJ;AACEM,UAAAA,IAAI,uBADN;AAEEC,UAAAA,OAAO,EAAEJ;AAFX,SA7BI,EAkCHO,MAlCG,CAmCFX,QAAQ,CAACY,MAAT,GAAkB,CAAlB,GACI;AACEL,UAAAA,IAAI,YADN;AAEEC,UAAAA,OAAO,EAAER,QAAQ,CAACa,IAAT;AAFX,SADJ,GAKI,EAxCF,EA0CHF,MA1CG,CA0CIZ,IA1CJ,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAoDD,KAzDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD+B;AAAA,CAAjC;;AA8DA,eAAeH,QAAf;AAEA,IAAMM,YAAY,GAAGP,OAAH,mBAAlB","sourcesContent":["import React, {FC} from 'react';\nimport { Helmet } from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby';\n\ninterface IMetatagas {\n  description?: string;\n  lang?: string;\n  meta?: Array<any>;\n  keywords?: string[];\n  title: string;\n}\n\nconst MetaTags: FC<IMetatagas> = ({ description, lang = 'en', meta = [], keywords = [], title }) => (\n  <StaticQuery\n    query={detailsQuery}\n    render={data => {\n      const metaDescription =\n        description || data.site.siteMetadata.description\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang,\n          }}\n          title={title}\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription,\n            },\n            {\n              property: `og:title`,\n              content: title,\n            },\n            {\n              property: `og:description`,\n              content: metaDescription,\n            },\n            {\n              property: `og:type`,\n              content: `website`,\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`,\n            },\n            {\n              name: `twitter:creator`,\n              content: data.site.siteMetadata.author,\n            },\n            {\n              name: `twitter:title`,\n              content: title,\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              keywords.length > 0\n                ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                : []\n            )\n            .concat(meta)}\n        />\n      )\n    }}\n  />\n)\n\nexport default MetaTags;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}