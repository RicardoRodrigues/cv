{"ast":null,"code":"var _jsxFileName = \"/Users/psyckic/Development/CV/src/components/Loader/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { cover } from 'polished';\nimport Logo from '../Logo';\nimport { fadeInBuilder, fadeOutBuilder } from '../../utils';\nconst Holder = styled.div.withConfig({\n  displayName: \"Loader__Holder\",\n  componentId: \"j83lno-0\"\n})([\"position:relative;\", \"\"], ({\n  isLoading\n}) => isLoading ? fadeInBuilder(3) : fadeOutBuilder(2));\nconst LogoWithAnimation = styled(Logo).withConfig({\n  displayName: \"Loader__LogoWithAnimation\",\n  componentId: \"j83lno-1\"\n})([\"display:flex;justify-content:center;align-items:center;\", \"\"], cover());\n\nconst Loader = ({\n  className,\n  fadeOutTime,\n  onLoaded,\n  onAnimationEnd\n}) => {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n      onLoaded && onLoaded();\n    }, 4000);\n  }, []);\n  useEffect(() => {\n    if (!isLoading) {\n      setTimeout(() => {\n        onAnimationEnd && onAnimationEnd();\n      }, fadeOutTime);\n    }\n  }, [isLoading]);\n  return __jsx(Holder, {\n    className: className,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(LogoWithAnimation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 63\n    }\n  }));\n};\n\nexport default Loader;","map":{"version":3,"sources":["/Users/psyckic/Development/CV/src/components/Loader/index.tsx"],"names":["React","useEffect","useState","styled","cover","Logo","fadeInBuilder","fadeOutBuilder","Holder","div","isLoading","LogoWithAnimation","Loader","className","fadeOutTime","onLoaded","onAnimationEnd","setIsLoading","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAAuBC,aAAvB,EAAsCC,cAAtC,QAA2D,aAA3D;AAKA,MAAMC,MAAM,GAAGL,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,+BAER,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiBA,SAAS,GAAGJ,aAAa,CAAC,CAAD,CAAhB,GAAsBC,cAAc,CAAC,CAAD,CAFtD,CAAZ;AAMA,MAAMI,iBAAiB,GAAGR,MAAM,CAACE,IAAD,CAAT;AAAA;AAAA;AAAA,oEAInBD,KAAK,EAJc,CAAvB;;AAeA,MAAMQ,MAAkB,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,WAAZ;AAAyBC,EAAAA,QAAzB;AAAmCC,EAAAA;AAAnC,CAAD,KAAwD;AACjF,QAAM;AAAA,OAACN,SAAD;AAAA,OAAYO;AAAZ,MAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,IAAIA,QAAQ,EAApB;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GALQ,EAKN,EALM,CAAT;AAOAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,SAAL,EAAgB;AACdQ,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,cAAc,IAAIA,cAAc,EAAhC;AACD,OAFS,EAEPF,WAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAACJ,SAAD,CANM,CAAT;AAQC,SAAO,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEG,SAAnB;AAA8B,IAAA,SAAS,EAAEH,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoD,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApD,CAAP;AAEF,CApBD;;AAsBA,eAAeE,MAAf","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport {cover} from 'polished';\nimport Logo from '../Logo';\nimport {expandBuilder, fadeInBuilder, fadeOutBuilder} from '../../utils';\n\ninterface IHolder {\n  isLoading: boolean;\n}\nconst Holder = styled.div<IHolder>`\n  position: relative;\n  ${({isLoading}) => isLoading ? fadeInBuilder(3) : fadeOutBuilder(2)}\n`;\n\n\nconst LogoWithAnimation = styled(Logo)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${cover()}\n`;\n\ninterface IProps {\n  className?: string;\n  fadeOutTime: number;\n  showLogo?: boolean;\n  onLoaded?: () => void;\n  onAnimationEnd?: () => void;\n}\n\nconst Loader: FC<IProps> = ({className, fadeOutTime, onLoaded, onAnimationEnd}) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n      onLoaded && onLoaded();\n    }, 4000);\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading) {\n      setTimeout(() => {\n        onAnimationEnd && onAnimationEnd();\n      }, fadeOutTime);\n    }\n  }, [isLoading]);\n\n   return <Holder className={className} isLoading={isLoading}><LogoWithAnimation /></Holder>;\n\n};\n\nexport default Loader;\n"]},"metadata":{},"sourceType":"module"}