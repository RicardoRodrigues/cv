{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/psyckic/Development/CV/src/components/Loader/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { cover } from 'polished';\nimport Logo from '../Logo';\nimport { expandBuilder, fadeInBuilder, fadeOutBuilder } from '../../utils';\nvar Holder = styled.div.withConfig({\n  displayName: \"Loader__Holder\",\n  componentId: \"j83lno-0\"\n})([\"position:relative;\", \"\"], function (_ref) {\n  var isLoading = _ref.isLoading;\n  return isLoading ? fadeInBuilder(3) : fadeOutBuilder(2);\n});\nvar LogoWithAnimation = styled(Logo).withConfig({\n  displayName: \"Loader__LogoWithAnimation\",\n  componentId: \"j83lno-1\"\n})([\"display:flex;justify-content:center;align-items:center;\", \" \", \"\"], cover(), expandBuilder(2));\n\nvar Loader = function Loader(_ref2) {\n  var className = _ref2.className,\n      fadeOutTime = _ref2.fadeOutTime,\n      onLoaded = _ref2.onLoaded,\n      onAnimationEnd = _ref2.onAnimationEnd;\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n      onLoaded && onLoaded();\n    }, 4000);\n  }, []);\n  useEffect(function () {\n    if (!isLoading) {\n      setTimeout(function () {\n        onAnimationEnd && onAnimationEnd();\n      }, fadeOutTime);\n    }\n  }, [isLoading]);\n  return __jsx(Holder, {\n    className: className,\n    isLoading: isLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(LogoWithAnimation, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 63\n    }\n  }));\n};\n\nexport default Loader;","map":{"version":3,"sources":["/Users/psyckic/Development/CV/src/components/Loader/index.tsx"],"names":["React","useEffect","useState","styled","cover","Logo","expandBuilder","fadeInBuilder","fadeOutBuilder","Holder","div","isLoading","LogoWithAnimation","Loader","className","fadeOutTime","onLoaded","onAnimationEnd","setIsLoading","setTimeout"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAAQC,aAAR,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA2D,aAA3D;AAKA,IAAMC,MAAM,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,+BAER;AAAA,MAAEC,SAAF,QAAEA,SAAF;AAAA,SAAiBA,SAAS,GAAGJ,aAAa,CAAC,CAAD,CAAhB,GAAsBC,cAAc,CAAC,CAAD,CAA9D;AAAA,CAFQ,CAAZ;AAMA,IAAMI,iBAAiB,GAAGT,MAAM,CAACE,IAAD,CAAT;AAAA;AAAA;AAAA,yEAInBD,KAAK,EAJc,EAKnBE,aAAa,CAAC,CAAD,CALM,CAAvB;;AAgBA,IAAMO,MAAkB,GAAG,SAArBA,MAAqB,QAAwD;AAAA,MAAtDC,SAAsD,SAAtDA,SAAsD;AAAA,MAA3CC,WAA2C,SAA3CA,WAA2C;AAAA,MAA9BC,QAA8B,SAA9BA,QAA8B;AAAA,MAApBC,cAAoB,SAApBA,cAAoB;;AAAA,kBAC/Cf,QAAQ,CAAC,IAAD,CADuC;AAAA,MAC1ES,SAD0E;AAAA,MAC/DO,YAD+D;;AAGjFjB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,UAAU,CAAC,YAAM;AACfD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,IAAIA,QAAQ,EAApB;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GALQ,EAKN,EALM,CAAT;AAOAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACU,SAAL,EAAgB;AACdQ,MAAAA,UAAU,CAAC,YAAM;AACfF,QAAAA,cAAc,IAAIA,cAAc,EAAhC;AACD,OAFS,EAEPF,WAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAACJ,SAAD,CANM,CAAT;AAQC,SAAO,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEG,SAAnB;AAA8B,IAAA,SAAS,EAAEH,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoD,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApD,CAAP;AAEF,CApBD;;AAsBA,eAAeE,MAAf","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport {cover} from 'polished';\nimport Logo from '../Logo';\nimport {expandBuilder, fadeInBuilder, fadeOutBuilder} from '../../utils';\n\ninterface IHolder {\n  isLoading: boolean;\n}\nconst Holder = styled.div<IHolder>`\n  position: relative;\n  ${({isLoading}) => isLoading ? fadeInBuilder(3) : fadeOutBuilder(2)}\n`;\n\n\nconst LogoWithAnimation = styled(Logo)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${cover()}\n  ${expandBuilder(2)}\n`;\n\ninterface IProps {\n  className?: string;\n  fadeOutTime: number;\n  showLogo?: boolean;\n  onLoaded?: () => void;\n  onAnimationEnd?: () => void;\n}\n\nconst Loader: FC<IProps> = ({className, fadeOutTime, onLoaded, onAnimationEnd}) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n      onLoaded && onLoaded();\n    }, 4000);\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading) {\n      setTimeout(() => {\n        onAnimationEnd && onAnimationEnd();\n      }, fadeOutTime);\n    }\n  }, [isLoading]);\n\n   return <Holder className={className} isLoading={isLoading}><LogoWithAnimation /></Holder>;\n\n};\n\nexport default Loader;\n"]},"metadata":{},"sourceType":"module"}