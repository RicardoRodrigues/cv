{"ast":null,"code":"var _jsxFileName = \"/Users/psyckic/Development/CV/src/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { cover } from 'polished';\nimport Layout from '../components/Layout';\nimport IntroCard from '../components/IntroCard';\nimport Loader from '../components/Loader';\nconst LoaderOverlay = styled(Loader).withConfig({\n  displayName: \"pages__LoaderOverlay\",\n  componentId: \"lsk2yb-0\"\n})([\"\", \"\"], cover());\n\nconst Home = () => {\n  const {\n    0: isLoaded,\n    1: setIsLoaded\n  } = useState(false);\n  const {\n    0: hasAnimationEnd,\n    1: setHasAnimationEnd\n  } = useState(false);\n  return __jsx(React.Fragment, null, !hasAnimationEnd && __jsx(LoaderOverlay, {\n    onLoaded: () => setIsLoaded(true),\n    onAnimationEnd: () => setHasAnimationEnd(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, isLoaded && __jsx(IntroCard, {\n    name: \"Ricardo Rodrigues\",\n    description: \"Front End Developer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/psyckic/Development/CV/src/pages/index.tsx"],"names":["React","useState","styled","cover","Layout","IntroCard","Loader","LoaderOverlay","Home","isLoaded","setIsLoaded","hasAnimationEnd","setHasAnimationEnd"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAqC,mBAArC;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,MAAMC,aAAa,GAAEL,MAAM,CAACI,MAAD,CAAR;AAAA;AAAA;AAAA,aACfH,KAAK,EADU,CAAnB;;AAIA,MAAMK,IAAQ,GAAG,MAAM;AACrB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACU,eAAD;AAAA,OAAkBC;AAAlB,MAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,SACE,4BACG,CAACU,eAAD,IACC,MAAC,aAAD;AACE,IAAA,QAAQ,EAAE,MAAMD,WAAW,CAAC,IAAD,CAD7B;AAEE,IAAA,cAAc,EAAE,MAAME,kBAAkB,CAAC,IAAD,CAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAOE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIH,QAAQ,IACR,MAAC,SAAD;AACE,IAAA,IAAI,EAAC,mBADP;AAEE,IAAA,WAAW,EAAC,qBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAPF,CADF;AAkBD,CArBD;;AAuBA,eAAeD,IAAf","sourcesContent":["import React, { FC, useState } from 'react';\nimport styled, {keyframes, css} from 'styled-components';\nimport {cover} from 'polished';\nimport theme from '../theme';\nimport Layout from '../components/Layout';\nimport IntroCard from '../components/IntroCard';\nimport Loader from '../components/Loader';\n\nconst LoaderOverlay= styled(Loader)`\n  ${cover()}\n`;\n\nconst Home: FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hasAnimationEnd, setHasAnimationEnd] = useState(false);\n  return (\n    <>\n      {!hasAnimationEnd && (\n        <LoaderOverlay\n          onLoaded={() => setIsLoaded(true)}\n          onAnimationEnd={() => setHasAnimationEnd(true)}\n        />\n      )}\n      <Layout>\n        { isLoaded && (\n          <IntroCard\n            name=\"Ricardo Rodrigues\"\n            description=\"Front End Developer\"\n          />\n        )}\n      </Layout>\n    </>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}