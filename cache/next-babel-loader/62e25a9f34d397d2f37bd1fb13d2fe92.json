{"ast":null,"code":"var _jsxFileName = \"/Users/psyckic/Development/CV/src/components/MetaTags/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst MetaTags = ({\n  description,\n  lang = 'en',\n  meta = [],\n  keywords = [],\n  title\n}) => __jsx(StaticQuery, {\n  query: detailsQuery,\n  render: data => {\n    const metaDescription = description || data.site.siteMetadata.description;\n    return __jsx(Helmet, {\n      htmlAttributes: {\n        lang\n      },\n      title: title,\n      titleTemplate: `%s | ${data.site.siteMetadata.title}`,\n      meta: [{\n        name: `description`,\n        content: metaDescription\n      }, {\n        property: `og:title`,\n        content: title\n      }, {\n        property: `og:description`,\n        content: metaDescription\n      }, {\n        property: `og:type`,\n        content: `website`\n      }, {\n        name: `twitter:card`,\n        content: `summary`\n      }, {\n        name: `twitter:creator`,\n        content: data.site.siteMetadata.author\n      }, {\n        name: `twitter:title`,\n        content: title\n      }, {\n        name: `twitter:description`,\n        content: metaDescription\n      }].concat(keywords.length > 0 ? {\n        name: `keywords`,\n        content: keywords.join(`, `)\n      } : []).concat(meta),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    });\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }\n});\n\nexport default MetaTags;\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/psyckic/Development/CV/src/components/MetaTags/index.tsx"],"names":["React","Helmet","StaticQuery","graphql","MetaTags","description","lang","meta","keywords","title","detailsQuery","data","metaDescription","site","siteMetadata","name","content","property","author","concat","length","join"],"mappings":";;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,QAArC;;AAUA,MAAMC,QAAwB,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,IAAI,GAAG,IAAtB;AAA4BC,EAAAA,IAAI,GAAG,EAAnC;AAAuCC,EAAAA,QAAQ,GAAG,EAAlD;AAAsDC,EAAAA;AAAtD,CAAD,KAC/B,MAAC,WAAD;AACE,EAAA,KAAK,EAAEC,YADT;AAEE,EAAA,MAAM,EAAEC,IAAI,IAAI;AACd,UAAMC,eAAe,GACnBP,WAAW,IAAIM,IAAI,CAACE,IAAL,CAAUC,YAAV,CAAuBT,WADxC;AAEA,WACE,MAAC,MAAD;AACE,MAAA,cAAc,EAAE;AACdC,QAAAA;AADc,OADlB;AAIE,MAAA,KAAK,EAAEG,KAJT;AAKE,MAAA,aAAa,EAAG,QAAOE,IAAI,CAACE,IAAL,CAAUC,YAAV,CAAuBL,KAAM,EALtD;AAME,MAAA,IAAI,EAAE,CACJ;AACEM,QAAAA,IAAI,EAAG,aADT;AAEEC,QAAAA,OAAO,EAAEJ;AAFX,OADI,EAKJ;AACEK,QAAAA,QAAQ,EAAG,UADb;AAEED,QAAAA,OAAO,EAAEP;AAFX,OALI,EASJ;AACEQ,QAAAA,QAAQ,EAAG,gBADb;AAEED,QAAAA,OAAO,EAAEJ;AAFX,OATI,EAaJ;AACEK,QAAAA,QAAQ,EAAG,SADb;AAEED,QAAAA,OAAO,EAAG;AAFZ,OAbI,EAiBJ;AACED,QAAAA,IAAI,EAAG,cADT;AAEEC,QAAAA,OAAO,EAAG;AAFZ,OAjBI,EAqBJ;AACED,QAAAA,IAAI,EAAG,iBADT;AAEEC,QAAAA,OAAO,EAAEL,IAAI,CAACE,IAAL,CAAUC,YAAV,CAAuBI;AAFlC,OArBI,EAyBJ;AACEH,QAAAA,IAAI,EAAG,eADT;AAEEC,QAAAA,OAAO,EAAEP;AAFX,OAzBI,EA6BJ;AACEM,QAAAA,IAAI,EAAG,qBADT;AAEEC,QAAAA,OAAO,EAAEJ;AAFX,OA7BI,EAkCHO,MAlCG,CAmCFX,QAAQ,CAACY,MAAT,GAAkB,CAAlB,GACI;AACEL,QAAAA,IAAI,EAAG,UADT;AAEEC,QAAAA,OAAO,EAAER,QAAQ,CAACa,IAAT,CAAe,IAAf;AAFX,OADJ,GAKI,EAxCF,EA0CHF,MA1CG,CA0CIZ,IA1CJ,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAoDD,GAzDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF;;AA8DA,eAAeH,QAAf;AAEA,MAAMM,YAAY,GAAGP,OAAQ;;;;;;;;;;CAA7B","sourcesContent":["import React, {FC} from 'react';\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby';\n\ninterface IMetatagas {\n  description?: string;\n  lang?: string;\n  meta?: Array<any>;\n  keywords?: string[];\n  title: string;\n}\n\nconst MetaTags: FC<IMetatagas> = ({ description, lang = 'en', meta = [], keywords = [], title }) => (\n  <StaticQuery\n    query={detailsQuery}\n    render={data => {\n      const metaDescription =\n        description || data.site.siteMetadata.description\n      return (\n        <Helmet\n          htmlAttributes={{\n            lang,\n          }}\n          title={title}\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n          meta={[\n            {\n              name: `description`,\n              content: metaDescription,\n            },\n            {\n              property: `og:title`,\n              content: title,\n            },\n            {\n              property: `og:description`,\n              content: metaDescription,\n            },\n            {\n              property: `og:type`,\n              content: `website`,\n            },\n            {\n              name: `twitter:card`,\n              content: `summary`,\n            },\n            {\n              name: `twitter:creator`,\n              content: data.site.siteMetadata.author,\n            },\n            {\n              name: `twitter:title`,\n              content: title,\n            },\n            {\n              name: `twitter:description`,\n              content: metaDescription,\n            },\n          ]\n            .concat(\n              keywords.length > 0\n                ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                : []\n            )\n            .concat(meta)}\n        />\n      )\n    }}\n  />\n)\n\nexport default MetaTags;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}